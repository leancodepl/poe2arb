// Package swagger provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package swagger

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Defines values for ProjectListProjectsOpen.
const (
	ProjectListProjectsOpenN0 ProjectListProjectsOpen = 0

	ProjectListProjectsOpenN1 ProjectListProjectsOpen = 1
)

// Defines values for ProjectListProjectsPublic.
const (
	ProjectListProjectsPublicN0 ProjectListProjectsPublic = 0

	ProjectListProjectsPublicN1 ProjectListProjectsPublic = 1
)

// Authentication defines model for Authentication.
type Authentication struct {
	ApiToken string `json:"api_token"`
}

// ID defines model for ID.
type ID struct {
	Id int `json:"id"`
}

// LanguagesListLong defines model for LanguagesListLong.
type LanguagesListLong struct {
	Languages *[]struct {
		Code         *string  `json:"code,omitempty"`
		Name         *string  `json:"name,omitempty"`
		Percentage   *float32 `json:"percentage,omitempty"`
		Translations *int     `json:"translations,omitempty"`
		Updated      *string  `json:"updated,omitempty"`
	} `json:"languages,omitempty"`
}

// LanguagesListShort defines model for LanguagesListShort.
type LanguagesListShort struct {
	Languages *[]struct {
		Code *string `json:"code,omitempty"`
		Name *string `json:"name,omitempty"`
	} `json:"languages,omitempty"`
}

// ProjectList defines model for ProjectList.
type ProjectList struct {
	Projects *[]struct {
		Created *string                    `json:"created,omitempty"`
		Id      *int                       `json:"id,omitempty"`
		Name    *string                    `json:"name,omitempty"`
		Open    *ProjectListProjectsOpen   `json:"open,omitempty"`
		Public  *ProjectListProjectsPublic `json:"public,omitempty"`
	} `json:"projects,omitempty"`
}

// ProjectListProjectsOpen defines model for ProjectList.Projects.Open.
type ProjectListProjectsOpen int

// ProjectListProjectsPublic defines model for ProjectList.Projects.Public.
type ProjectListProjectsPublic int

// ProjectLong defines model for ProjectLong.
type ProjectLong struct {
	Project *struct {
		Created          *string `json:"created,omitempty"`
		Description      *string `json:"description,omitempty"`
		FallbackLanguage *string `json:"fallback_language,omitempty"`
		Id               *string `json:"id,omitempty"`
		Name             *string `json:"name,omitempty"`
		Open             *int    `json:"open,omitempty"`
		Public           *int    `json:"public,omitempty"`
		Reference        *string `json:"reference,omitempty"`
		Terms            *int    `json:"terms,omitempty"`
	} `json:"project,omitempty"`
}

// Response defines model for Response.
type Response struct {
	Response *struct {
		Code    *string `json:"code,omitempty"`
		Message *string `json:"message,omitempty"`
		Status  *string `json:"status,omitempty"`
	} `json:"response,omitempty"`
}

// TermsFull defines model for TermsFull.
type TermsFull struct {
	Terms *struct {
		Added   *int `json:"added,omitempty"`
		Deleted *int `json:"deleted,omitempty"`
		Parsed  *int `json:"parsed,omitempty"`
		Updated *int `json:"updated,omitempty"`
	} `json:"terms,omitempty"`
}

// TermsListFull defines model for TermsListFull.
type TermsListFull struct {
	Terms *[]struct {
		Comment     *string   `json:"comment,omitempty"`
		Context     *string   `json:"context,omitempty"`
		Created     *string   `json:"created,omitempty"`
		Plural      *string   `json:"plural,omitempty"`
		Reference   *string   `json:"reference,omitempty"`
		Tags        *[]string `json:"tags,omitempty"`
		Term        *string   `json:"term,omitempty"`
		Translation *struct {
			Content   *string `json:"content,omitempty"`
			Fuzzy     *int    `json:"fuzzy,omitempty"`
			ProofRead *int    `json:"proof_read,omitempty"`
			Updated   *string `json:"updated,omitempty"`
		} `json:"translation,omitempty"`
		Updated *string `json:"updated,omitempty"`
	} `json:"terms,omitempty"`
}

// TermsLong defines model for TermsLong.
type TermsLong struct {
	Terms *struct {
		Added   *int `json:"added,omitempty"`
		Deleted *int `json:"deleted,omitempty"`
		Parsed  *int `json:"parsed,omitempty"`
	} `json:"terms,omitempty"`
}

// TermsShortAdded defines model for TermsShortAdded.
type TermsShortAdded struct {
	Terms *struct {
		Added  *int `json:"added,omitempty"`
		Parsed *int `json:"parsed,omitempty"`
	} `json:"terms,omitempty"`
}

// TermsShortComment defines model for TermsShortComment.
type TermsShortComment struct {
	Terms *struct {
		Parsed           *int `json:"parsed,omitempty"`
		WithAddedComment *int `json:"with_added_comment,omitempty"`
	} `json:"terms,omitempty"`
}

// TermsShortDeleted defines model for TermsShortDeleted.
type TermsShortDeleted struct {
	Terms *struct {
		Deleted *int `json:"deleted,omitempty"`
		Parsed  *int `json:"parsed,omitempty"`
	} `json:"terms,omitempty"`
}

// TermsShortUpdated defines model for TermsShortUpdated.
type TermsShortUpdated struct {
	Terms *struct {
		Parsed  *int `json:"parsed,omitempty"`
		Updated *int `json:"updated,omitempty"`
	} `json:"terms,omitempty"`
}

// TranslationsLong defines model for TranslationsLong.
type TranslationsLong struct {
	Translations *struct {
		Added   *int `json:"added,omitempty"`
		Deleted *int `json:"deleted,omitempty"`
		Parsed  *int `json:"parsed,omitempty"`
	} `json:"translations,omitempty"`
}

// TranslationsShort defines model for TranslationsShort.
type TranslationsShort struct {
	Translations *struct {
		Added   *int `json:"added,omitempty"`
		Parsed  *int `json:"parsed,omitempty"`
		Updated *int `json:"updated,omitempty"`
	} `json:"translations,omitempty"`
}

// TranslationsShortAdded defines model for TranslationsShortAdded.
type TranslationsShortAdded struct {
	Translations *struct {
		Added  *int `json:"added,omitempty"`
		Parsed *int `json:"parsed,omitempty"`
	} `json:"translations,omitempty"`
}

// TranslationsShortDeleted defines model for TranslationsShortDeleted.
type TranslationsShortDeleted struct {
	Translations *struct {
		Deleted *int `json:"deleted,omitempty"`
		Parsed  *int `json:"parsed,omitempty"`
	} `json:"translations,omitempty"`
}

// TranslationsShortUpdated defines model for TranslationsShortUpdated.
type TranslationsShortUpdated struct {
	Translations *struct {
		Parsed  *int `json:"parsed,omitempty"`
		Updated *int `json:"updated,omitempty"`
	} `json:"translations,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostContributorsAdd request with any body
	PostContributorsAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContributorsList request with any body
	PostContributorsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostContributorsRemove request with any body
	PostContributorsRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLanguagesAdd request with any body
	PostLanguagesAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLanguagesAvailable request with any body
	PostLanguagesAvailableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLanguagesDelete request with any body
	PostLanguagesDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLanguagesList request with any body
	PostLanguagesListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLanguagesUpdate request with any body
	PostLanguagesUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsAdd request with any body
	PostProjectsAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsDelete request with any body
	PostProjectsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsExport request with any body
	PostProjectsExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsList request with any body
	PostProjectsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsSync request with any body
	PostProjectsSyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsUpdate request with any body
	PostProjectsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsUpload request with any body
	PostProjectsUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProjectsView request with any body
	PostProjectsViewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTermsAdd request with any body
	PostTermsAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTermsAddComment request with any body
	PostTermsAddCommentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTermsDelete request with any body
	PostTermsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTermsList request with any body
	PostTermsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTermsUpdate request with any body
	PostTermsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTranslationsAdd request with any body
	PostTranslationsAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTranslationsDelete request with any body
	PostTranslationsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTranslationsUpdate request with any body
	PostTranslationsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostContributorsAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContributorsAddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContributorsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContributorsListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostContributorsRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostContributorsRemoveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLanguagesAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLanguagesAddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLanguagesAvailableWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLanguagesAvailableRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLanguagesDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLanguagesDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLanguagesListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLanguagesListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLanguagesUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLanguagesUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsAddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsExportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsExportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsSyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsSyncRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsUploadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProjectsViewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProjectsViewRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTermsAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTermsAddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTermsAddCommentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTermsAddCommentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTermsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTermsDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTermsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTermsListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTermsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTermsUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTranslationsAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTranslationsAddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTranslationsDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTranslationsDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTranslationsUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTranslationsUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostContributorsAddRequestWithBody generates requests for PostContributorsAdd with any type of body
func NewPostContributorsAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contributors/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostContributorsListRequestWithBody generates requests for PostContributorsList with any type of body
func NewPostContributorsListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contributors/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostContributorsRemoveRequestWithBody generates requests for PostContributorsRemove with any type of body
func NewPostContributorsRemoveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contributors/remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostLanguagesAddRequestWithBody generates requests for PostLanguagesAdd with any type of body
func NewPostLanguagesAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/languages/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostLanguagesAvailableRequestWithBody generates requests for PostLanguagesAvailable with any type of body
func NewPostLanguagesAvailableRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/languages/available")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostLanguagesDeleteRequestWithBody generates requests for PostLanguagesDelete with any type of body
func NewPostLanguagesDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/languages/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostLanguagesListRequestWithBody generates requests for PostLanguagesList with any type of body
func NewPostLanguagesListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/languages/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostLanguagesUpdateRequestWithBody generates requests for PostLanguagesUpdate with any type of body
func NewPostLanguagesUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/languages/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProjectsAddRequestWithBody generates requests for PostProjectsAdd with any type of body
func NewPostProjectsAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProjectsDeleteRequestWithBody generates requests for PostProjectsDelete with any type of body
func NewPostProjectsDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProjectsExportRequestWithBody generates requests for PostProjectsExport with any type of body
func NewPostProjectsExportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProjectsListRequestWithBody generates requests for PostProjectsList with any type of body
func NewPostProjectsListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProjectsSyncRequestWithBody generates requests for PostProjectsSync with any type of body
func NewPostProjectsSyncRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProjectsUpdateRequestWithBody generates requests for PostProjectsUpdate with any type of body
func NewPostProjectsUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProjectsUploadRequestWithBody generates requests for PostProjectsUpload with any type of body
func NewPostProjectsUploadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/upload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostProjectsViewRequestWithBody generates requests for PostProjectsView with any type of body
func NewPostProjectsViewRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/view")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTermsAddRequestWithBody generates requests for PostTermsAdd with any type of body
func NewPostTermsAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/terms/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTermsAddCommentRequestWithBody generates requests for PostTermsAddComment with any type of body
func NewPostTermsAddCommentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/terms/add_comment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTermsDeleteRequestWithBody generates requests for PostTermsDelete with any type of body
func NewPostTermsDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/terms/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTermsListRequestWithBody generates requests for PostTermsList with any type of body
func NewPostTermsListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/terms/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTermsUpdateRequestWithBody generates requests for PostTermsUpdate with any type of body
func NewPostTermsUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/terms/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTranslationsAddRequestWithBody generates requests for PostTranslationsAdd with any type of body
func NewPostTranslationsAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/translations/add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTranslationsDeleteRequestWithBody generates requests for PostTranslationsDelete with any type of body
func NewPostTranslationsDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/translations/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTranslationsUpdateRequestWithBody generates requests for PostTranslationsUpdate with any type of body
func NewPostTranslationsUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/translations/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostContributorsAdd request with any body
	PostContributorsAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContributorsAddResponse, error)

	// PostContributorsList request with any body
	PostContributorsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContributorsListResponse, error)

	// PostContributorsRemove request with any body
	PostContributorsRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContributorsRemoveResponse, error)

	// PostLanguagesAdd request with any body
	PostLanguagesAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLanguagesAddResponse, error)

	// PostLanguagesAvailable request with any body
	PostLanguagesAvailableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLanguagesAvailableResponse, error)

	// PostLanguagesDelete request with any body
	PostLanguagesDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLanguagesDeleteResponse, error)

	// PostLanguagesList request with any body
	PostLanguagesListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLanguagesListResponse, error)

	// PostLanguagesUpdate request with any body
	PostLanguagesUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLanguagesUpdateResponse, error)

	// PostProjectsAdd request with any body
	PostProjectsAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsAddResponse, error)

	// PostProjectsDelete request with any body
	PostProjectsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsDeleteResponse, error)

	// PostProjectsExport request with any body
	PostProjectsExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsExportResponse, error)

	// PostProjectsList request with any body
	PostProjectsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsListResponse, error)

	// PostProjectsSync request with any body
	PostProjectsSyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsSyncResponse, error)

	// PostProjectsUpdate request with any body
	PostProjectsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsUpdateResponse, error)

	// PostProjectsUpload request with any body
	PostProjectsUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsUploadResponse, error)

	// PostProjectsView request with any body
	PostProjectsViewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsViewResponse, error)

	// PostTermsAdd request with any body
	PostTermsAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTermsAddResponse, error)

	// PostTermsAddComment request with any body
	PostTermsAddCommentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTermsAddCommentResponse, error)

	// PostTermsDelete request with any body
	PostTermsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTermsDeleteResponse, error)

	// PostTermsList request with any body
	PostTermsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTermsListResponse, error)

	// PostTermsUpdate request with any body
	PostTermsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTermsUpdateResponse, error)

	// PostTranslationsAdd request with any body
	PostTranslationsAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTranslationsAddResponse, error)

	// PostTranslationsDelete request with any body
	PostTranslationsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTranslationsDeleteResponse, error)

	// PostTranslationsUpdate request with any body
	PostTranslationsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTranslationsUpdateResponse, error)
}

type PostContributorsAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
}

// Status returns HTTPResponse.Status
func (r PostContributorsAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContributorsAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContributorsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *struct {
			Contributors *[]struct {
				Email       *string `json:"email,omitempty"`
				Name        *string `json:"name,omitempty"`
				Permissions *[]struct {
					Project *struct {
						Id   *string `json:"id,omitempty"`
						Name *string `json:"name,omitempty"`
					} `json:"project,omitempty"`
					Proofreader *bool   `json:"proofreader,omitempty"`
					Type        *string `json:"type,omitempty"`
				} `json:"permissions,omitempty"`
			} `json:"contributors,omitempty"`
		} `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostContributorsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContributorsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostContributorsRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
}

// Status returns HTTPResponse.Status
func (r PostContributorsRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostContributorsRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLanguagesAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
	}
}

// Status returns HTTPResponse.Status
func (r PostLanguagesAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLanguagesAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLanguagesAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *LanguagesListShort `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostLanguagesAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLanguagesAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLanguagesDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
	}
}

// Status returns HTTPResponse.Status
func (r PostLanguagesDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLanguagesDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLanguagesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *LanguagesListLong `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostLanguagesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLanguagesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLanguagesUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *TranslationsShort `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostLanguagesUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLanguagesUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *ProjectLong `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostProjectsAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Response
}

// Status returns HTTPResponse.Status
func (r PostProjectsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *struct {
			Url *string `json:"url,omitempty"`
		} `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostProjectsExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *ProjectList `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostProjectsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsSyncResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *TermsFull `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostProjectsSyncResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsSyncResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *ProjectLong `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostProjectsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *struct {
			// Embedded struct due to allOf(#/components/schemas/TermsLong)
			TermsLong `yaml:",inline"`
			// Embedded struct due to allOf(#/components/schemas/TranslationsLong)
			TranslationsLong `yaml:",inline"`
		} `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostProjectsUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProjectsViewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *ProjectLong `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostProjectsViewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProjectsViewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTermsAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *TermsShortAdded `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostTermsAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTermsAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTermsAddCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *TermsShortComment `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostTermsAddCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTermsAddCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTermsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *TermsShortDeleted `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostTermsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTermsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTermsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *TermsListFull `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostTermsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTermsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTermsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *TermsShortUpdated `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostTermsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTermsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTranslationsAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *TranslationsShortAdded `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostTranslationsAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTranslationsAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTranslationsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *TranslationsShortDeleted `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostTranslationsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTranslationsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTranslationsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Embedded struct due to allOf(#/components/schemas/Response)
		Response `yaml:",inline"`
		// Embedded fields due to inline allOf schema
		Result *TranslationsShortUpdated `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostTranslationsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTranslationsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostContributorsAddWithBodyWithResponse request with arbitrary body returning *PostContributorsAddResponse
func (c *ClientWithResponses) PostContributorsAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContributorsAddResponse, error) {
	rsp, err := c.PostContributorsAddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContributorsAddResponse(rsp)
}

// PostContributorsListWithBodyWithResponse request with arbitrary body returning *PostContributorsListResponse
func (c *ClientWithResponses) PostContributorsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContributorsListResponse, error) {
	rsp, err := c.PostContributorsListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContributorsListResponse(rsp)
}

// PostContributorsRemoveWithBodyWithResponse request with arbitrary body returning *PostContributorsRemoveResponse
func (c *ClientWithResponses) PostContributorsRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostContributorsRemoveResponse, error) {
	rsp, err := c.PostContributorsRemoveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostContributorsRemoveResponse(rsp)
}

// PostLanguagesAddWithBodyWithResponse request with arbitrary body returning *PostLanguagesAddResponse
func (c *ClientWithResponses) PostLanguagesAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLanguagesAddResponse, error) {
	rsp, err := c.PostLanguagesAddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLanguagesAddResponse(rsp)
}

// PostLanguagesAvailableWithBodyWithResponse request with arbitrary body returning *PostLanguagesAvailableResponse
func (c *ClientWithResponses) PostLanguagesAvailableWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLanguagesAvailableResponse, error) {
	rsp, err := c.PostLanguagesAvailableWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLanguagesAvailableResponse(rsp)
}

// PostLanguagesDeleteWithBodyWithResponse request with arbitrary body returning *PostLanguagesDeleteResponse
func (c *ClientWithResponses) PostLanguagesDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLanguagesDeleteResponse, error) {
	rsp, err := c.PostLanguagesDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLanguagesDeleteResponse(rsp)
}

// PostLanguagesListWithBodyWithResponse request with arbitrary body returning *PostLanguagesListResponse
func (c *ClientWithResponses) PostLanguagesListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLanguagesListResponse, error) {
	rsp, err := c.PostLanguagesListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLanguagesListResponse(rsp)
}

// PostLanguagesUpdateWithBodyWithResponse request with arbitrary body returning *PostLanguagesUpdateResponse
func (c *ClientWithResponses) PostLanguagesUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLanguagesUpdateResponse, error) {
	rsp, err := c.PostLanguagesUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLanguagesUpdateResponse(rsp)
}

// PostProjectsAddWithBodyWithResponse request with arbitrary body returning *PostProjectsAddResponse
func (c *ClientWithResponses) PostProjectsAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsAddResponse, error) {
	rsp, err := c.PostProjectsAddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsAddResponse(rsp)
}

// PostProjectsDeleteWithBodyWithResponse request with arbitrary body returning *PostProjectsDeleteResponse
func (c *ClientWithResponses) PostProjectsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsDeleteResponse, error) {
	rsp, err := c.PostProjectsDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsDeleteResponse(rsp)
}

// PostProjectsExportWithBodyWithResponse request with arbitrary body returning *PostProjectsExportResponse
func (c *ClientWithResponses) PostProjectsExportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsExportResponse, error) {
	rsp, err := c.PostProjectsExportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsExportResponse(rsp)
}

// PostProjectsListWithBodyWithResponse request with arbitrary body returning *PostProjectsListResponse
func (c *ClientWithResponses) PostProjectsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsListResponse, error) {
	rsp, err := c.PostProjectsListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsListResponse(rsp)
}

// PostProjectsSyncWithBodyWithResponse request with arbitrary body returning *PostProjectsSyncResponse
func (c *ClientWithResponses) PostProjectsSyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsSyncResponse, error) {
	rsp, err := c.PostProjectsSyncWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsSyncResponse(rsp)
}

// PostProjectsUpdateWithBodyWithResponse request with arbitrary body returning *PostProjectsUpdateResponse
func (c *ClientWithResponses) PostProjectsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsUpdateResponse, error) {
	rsp, err := c.PostProjectsUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsUpdateResponse(rsp)
}

// PostProjectsUploadWithBodyWithResponse request with arbitrary body returning *PostProjectsUploadResponse
func (c *ClientWithResponses) PostProjectsUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsUploadResponse, error) {
	rsp, err := c.PostProjectsUploadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsUploadResponse(rsp)
}

// PostProjectsViewWithBodyWithResponse request with arbitrary body returning *PostProjectsViewResponse
func (c *ClientWithResponses) PostProjectsViewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProjectsViewResponse, error) {
	rsp, err := c.PostProjectsViewWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProjectsViewResponse(rsp)
}

// PostTermsAddWithBodyWithResponse request with arbitrary body returning *PostTermsAddResponse
func (c *ClientWithResponses) PostTermsAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTermsAddResponse, error) {
	rsp, err := c.PostTermsAddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTermsAddResponse(rsp)
}

// PostTermsAddCommentWithBodyWithResponse request with arbitrary body returning *PostTermsAddCommentResponse
func (c *ClientWithResponses) PostTermsAddCommentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTermsAddCommentResponse, error) {
	rsp, err := c.PostTermsAddCommentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTermsAddCommentResponse(rsp)
}

// PostTermsDeleteWithBodyWithResponse request with arbitrary body returning *PostTermsDeleteResponse
func (c *ClientWithResponses) PostTermsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTermsDeleteResponse, error) {
	rsp, err := c.PostTermsDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTermsDeleteResponse(rsp)
}

// PostTermsListWithBodyWithResponse request with arbitrary body returning *PostTermsListResponse
func (c *ClientWithResponses) PostTermsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTermsListResponse, error) {
	rsp, err := c.PostTermsListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTermsListResponse(rsp)
}

// PostTermsUpdateWithBodyWithResponse request with arbitrary body returning *PostTermsUpdateResponse
func (c *ClientWithResponses) PostTermsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTermsUpdateResponse, error) {
	rsp, err := c.PostTermsUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTermsUpdateResponse(rsp)
}

// PostTranslationsAddWithBodyWithResponse request with arbitrary body returning *PostTranslationsAddResponse
func (c *ClientWithResponses) PostTranslationsAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTranslationsAddResponse, error) {
	rsp, err := c.PostTranslationsAddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTranslationsAddResponse(rsp)
}

// PostTranslationsDeleteWithBodyWithResponse request with arbitrary body returning *PostTranslationsDeleteResponse
func (c *ClientWithResponses) PostTranslationsDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTranslationsDeleteResponse, error) {
	rsp, err := c.PostTranslationsDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTranslationsDeleteResponse(rsp)
}

// PostTranslationsUpdateWithBodyWithResponse request with arbitrary body returning *PostTranslationsUpdateResponse
func (c *ClientWithResponses) PostTranslationsUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTranslationsUpdateResponse, error) {
	rsp, err := c.PostTranslationsUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTranslationsUpdateResponse(rsp)
}

// ParsePostContributorsAddResponse parses an HTTP response from a PostContributorsAddWithResponse call
func ParsePostContributorsAddResponse(rsp *http.Response) (*PostContributorsAddResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContributorsAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostContributorsListResponse parses an HTTP response from a PostContributorsListWithResponse call
func ParsePostContributorsListResponse(rsp *http.Response) (*PostContributorsListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContributorsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *struct {
				Contributors *[]struct {
					Email       *string `json:"email,omitempty"`
					Name        *string `json:"name,omitempty"`
					Permissions *[]struct {
						Project *struct {
							Id   *string `json:"id,omitempty"`
							Name *string `json:"name,omitempty"`
						} `json:"project,omitempty"`
						Proofreader *bool   `json:"proofreader,omitempty"`
						Type        *string `json:"type,omitempty"`
					} `json:"permissions,omitempty"`
				} `json:"contributors,omitempty"`
			} `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostContributorsRemoveResponse parses an HTTP response from a PostContributorsRemoveWithResponse call
func ParsePostContributorsRemoveResponse(rsp *http.Response) (*PostContributorsRemoveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostContributorsRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostLanguagesAddResponse parses an HTTP response from a PostLanguagesAddWithResponse call
func ParsePostLanguagesAddResponse(rsp *http.Response) (*PostLanguagesAddResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLanguagesAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostLanguagesAvailableResponse parses an HTTP response from a PostLanguagesAvailableWithResponse call
func ParsePostLanguagesAvailableResponse(rsp *http.Response) (*PostLanguagesAvailableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLanguagesAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *LanguagesListShort `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostLanguagesDeleteResponse parses an HTTP response from a PostLanguagesDeleteWithResponse call
func ParsePostLanguagesDeleteResponse(rsp *http.Response) (*PostLanguagesDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLanguagesDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostLanguagesListResponse parses an HTTP response from a PostLanguagesListWithResponse call
func ParsePostLanguagesListResponse(rsp *http.Response) (*PostLanguagesListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLanguagesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *LanguagesListLong `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostLanguagesUpdateResponse parses an HTTP response from a PostLanguagesUpdateWithResponse call
func ParsePostLanguagesUpdateResponse(rsp *http.Response) (*PostLanguagesUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLanguagesUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *TranslationsShort `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectsAddResponse parses an HTTP response from a PostProjectsAddWithResponse call
func ParsePostProjectsAddResponse(rsp *http.Response) (*PostProjectsAddResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *ProjectLong `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectsDeleteResponse parses an HTTP response from a PostProjectsDeleteWithResponse call
func ParsePostProjectsDeleteResponse(rsp *http.Response) (*PostProjectsDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Response
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectsExportResponse parses an HTTP response from a PostProjectsExportWithResponse call
func ParsePostProjectsExportResponse(rsp *http.Response) (*PostProjectsExportResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *struct {
				Url *string `json:"url,omitempty"`
			} `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectsListResponse parses an HTTP response from a PostProjectsListWithResponse call
func ParsePostProjectsListResponse(rsp *http.Response) (*PostProjectsListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *ProjectList `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectsSyncResponse parses an HTTP response from a PostProjectsSyncWithResponse call
func ParsePostProjectsSyncResponse(rsp *http.Response) (*PostProjectsSyncResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsSyncResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *TermsFull `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectsUpdateResponse parses an HTTP response from a PostProjectsUpdateWithResponse call
func ParsePostProjectsUpdateResponse(rsp *http.Response) (*PostProjectsUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *ProjectLong `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectsUploadResponse parses an HTTP response from a PostProjectsUploadWithResponse call
func ParsePostProjectsUploadResponse(rsp *http.Response) (*PostProjectsUploadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *struct {
				// Embedded struct due to allOf(#/components/schemas/TermsLong)
				TermsLong `yaml:",inline"`
				// Embedded struct due to allOf(#/components/schemas/TranslationsLong)
				TranslationsLong `yaml:",inline"`
			} `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostProjectsViewResponse parses an HTTP response from a PostProjectsViewWithResponse call
func ParsePostProjectsViewResponse(rsp *http.Response) (*PostProjectsViewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProjectsViewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *ProjectLong `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTermsAddResponse parses an HTTP response from a PostTermsAddWithResponse call
func ParsePostTermsAddResponse(rsp *http.Response) (*PostTermsAddResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTermsAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *TermsShortAdded `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTermsAddCommentResponse parses an HTTP response from a PostTermsAddCommentWithResponse call
func ParsePostTermsAddCommentResponse(rsp *http.Response) (*PostTermsAddCommentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTermsAddCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *TermsShortComment `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTermsDeleteResponse parses an HTTP response from a PostTermsDeleteWithResponse call
func ParsePostTermsDeleteResponse(rsp *http.Response) (*PostTermsDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTermsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *TermsShortDeleted `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTermsListResponse parses an HTTP response from a PostTermsListWithResponse call
func ParsePostTermsListResponse(rsp *http.Response) (*PostTermsListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTermsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *TermsListFull `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTermsUpdateResponse parses an HTTP response from a PostTermsUpdateWithResponse call
func ParsePostTermsUpdateResponse(rsp *http.Response) (*PostTermsUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTermsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *TermsShortUpdated `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTranslationsAddResponse parses an HTTP response from a PostTranslationsAddWithResponse call
func ParsePostTranslationsAddResponse(rsp *http.Response) (*PostTranslationsAddResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTranslationsAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *TranslationsShortAdded `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTranslationsDeleteResponse parses an HTTP response from a PostTranslationsDeleteWithResponse call
func ParsePostTranslationsDeleteResponse(rsp *http.Response) (*PostTranslationsDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTranslationsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *TranslationsShortDeleted `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTranslationsUpdateResponse parses an HTTP response from a PostTranslationsUpdateWithResponse call
func ParsePostTranslationsUpdateResponse(rsp *http.Response) (*PostTranslationsUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTranslationsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Embedded struct due to allOf(#/components/schemas/Response)
			Response `yaml:",inline"`
			// Embedded fields due to inline allOf schema
			Result *TranslationsShortUpdated `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
